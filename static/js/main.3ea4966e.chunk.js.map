{"version":3,"sources":["ClickCounter.js","App.js","serviceWorker.js","index.js"],"names":["ClickCounter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showMassiveClicks","count","spanToggle","display","react_default","a","createElement","style","React","Component","defaultCount","App","appTitle","console","log","setState","_this2","onClick","increment","reset","src_ClickCounter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA2BeA,cAvBd,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACAQ,MAAQ,CACXC,kBAAmBT,EAAMU,MAAQ,EACjCA,MAAOT,EAAKD,MAAMU,OAJHT,wEASjB,IAAIU,EAAa,CAACC,QAAS,QAK3B,OAJGR,KAAKJ,MAAMU,MAAQ,IACpBC,EAAa,CAACC,QAAS,UAIxBC,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,qBAAaX,KAAKJ,MAAMU,OAC1BG,EAAAC,EAAAC,cAAA,QAAMC,MAAOL,GAAb,4BAlBqBM,IAAMC,WCC3BC,SAAe,GAsDNC,cAhDd,SAAAA,IAAe,IAAAnB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACbnB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,QACKI,MAAQ,CACXa,SAAU,GACTX,MAAOS,GAJGlB,oFASZqB,QAAQC,IAAI,WACbnB,KAAKoB,SAAS,CACZH,SAAU,qDAMXjB,KAAKoB,SAAS,CAACd,MAAON,KAAKI,MAAME,MAAM,oCAIxCN,KAAKoB,SAAS,CACZd,MAAO,qCAID,IAAAe,EAAArB,KAEP,OACCS,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,oBACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,kDAEJF,EAAAC,EAAAC,cAAA,UAAKX,KAAKI,MAAMa,UAChBR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQW,QAAS,kBAAMD,EAAKE,cAA5B,mBACAd,EAAAC,EAAAC,cAAA,UAAQW,QAAS,kBAAMD,EAAKG,UAA5B,2BAEFf,EAAAC,EAAAC,cAACc,EAAD,CAAcnB,MAAON,KAAKI,MAAME,gBA3CtBO,IAAMC,WCIJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ea4966e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass ClickCounter extends React.Component {\r\n\tconstructor (props) {\r\n  \tsuper(props);\r\n    this.state = {\r\n      showMassiveClicks: props.count > 5,\r\n      count: this.props.count\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    let spanToggle = {display: 'none'}\r\n  \tif (this.props.count > 5) {\r\n      spanToggle = {display: 'block'}\r\n       };\r\n  \t\r\n    return (\r\n    \t<div>\r\n        <div>Count: {this.props.count}</div>\r\n      <span style={spanToggle}>Lots of clicks!!</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClickCounter;","import React, { Component } from 'react';\r\nimport ClickCounter from './ClickCounter';\r\nimport './App.css';\r\n\r\nconst defaultCount = 0;\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n\tconstructor () {\r\n  \tsuper();\r\n  \tthis.state = {\r\n    \tappTitle: '',\r\n      count: defaultCount\r\n    }\r\n  }\r\n  \r\n  componentWillMount() {\r\n    console.log('mounted')\r\n  \tthis.setState({\r\n    \tappTitle: 'Lets Count!!'\r\n    });\r\n  }\r\n\r\n\r\n  increment () {\r\n    this.setState({count: this.state.count+1});\r\n  } \r\n  \r\n  reset () {\r\n  \tthis.setState({\r\n    \tcount: 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n  \t\r\n    return (\r\n    \t<div>\r\n        <div>Goals</div>\r\n          <ol>\r\n            <li>Get the title to show</li>\r\n            <li>Get the 'Lots of Clicks!!' to show when count is greater than 5</li>\r\n            <li>Make Buttons function appropriately</li>\r\n          </ol>\r\n        <h1>{this.state.appTitle}</h1>\r\n        <div>\r\n          <button onClick={() => this.increment()}>Increment Count</button>\r\n          <button onClick={() => this.reset()}>Reset Count To Default</button>\r\n        </div>\r\n        <ClickCounter count={this.state.count}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}